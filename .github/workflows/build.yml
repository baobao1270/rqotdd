name: Build & Release
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
    - main
permissions:
  contents: write

jobs:
  build-darwin:
    name: Build for macOS (Native)
    strategy:
      matrix:
        runs-on:
          - macos-13
          - macos-14
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update Rust
        run:  rustup update
      - name: Build
        run:  make all
      - name: Test Build Target Executable
        run: |
          brew install tree
          tree dist
          TMPDIR=$(mktemp -d)
          ARCHIVE_FILE=rqotdd-darwin-$(./scripts/native-arch.sh).tar.zst
          tar -C $TMPDIR -xvf dist/$ARCHIVE_FILE
          file   $TMPDIR/rqotdd
          $TMPDIR/rqotdd --help
          $TMPDIR/rqotdd --version
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-darwin-${{ matrix.runs-on }}
          path: dist/*.tar.zst
  build-linux-musl:
    name: Build for Linux (MUSL Cross)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update Rust
        run:  rustup update
      - name: Build
        run:  make all
      - name: Test Build Target Executable
        run: |
          for f in dist/*.tar.zst; do
            TMPDIR=$(mktemp -d)
            tar -C $TMPDIR -xvf $f
            file   $TMPDIR/rqotdd
          done
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-linux-musl
          path: dist/*.tar.zst
  docker:
    name: Build & Push Docker Image
    needs: [build-linux-musl]
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: josephcz
      DOCKER_IMAGE:    rqotdd
      DOCKER_REGISTRY: josephcz/rqotdd
      DOCKER_TOKEN:    ${{ secrets.DOCKER_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          name: artifact-linux-musl
          merge-multiple: true
      - name: Uncompress Artifacts
        run: |
          for path in dist/*.tar.zst; do
            arch=$(basename $path .tar.zst)
            arch=${arch##*-}
            case $arch in
              x86_64)  platform=amd64 ;;
              i686)    platform=386   ;;
              aarch64) platform=arm64 ;;
            esac
            mkdir     dist/$platform
            tar -C    dist/$platform -xvf $path
            file      dist/$platform/rqotdd
          done
          tree dist
      - name: Get Docker Tag
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            TAG=$(git describe --tags --abbrev=0)
            DOCKER_TAG=$DOCKER_REGISTRY:$TAG,$DOCKER_REGISTRY:latest
            echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
          else
            COMMIT=$(git rev-parse --short HEAD)
            TAG=commit-$COMMIT
            DOCKER_TAG=$DOCKER_REGISTRY:$TAG,$DOCKER_REGISTRY:latest-dev
            echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
          fi
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        env:
          DOCKER_BUILDKIT: "1"
        with:
          context:   .
          file:      Dockerfile
          platforms: linux/amd64,linux/arm64,linux/386
          push:      true
          tags:      ${{ env.DOCKER_TAG }}
  release:
    if: github.ref_type == 'tag'
    name: Release
    needs: [build-darwin, build-linux-musl]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Get Release Version
        id:   release-version
        run:  echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
      - name: Create Release
        run:  gh release create ${{ steps.release-version.outputs.tag }} *.tar.zst
        env:
          GH_TOKEN: ${{ github.token }}
